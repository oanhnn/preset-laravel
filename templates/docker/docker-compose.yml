version: '3.5'

# =========================================
# X-Templates
# =========================================
x-app-service: &app-service
  image: oanhnn/laravel:edge
  depends_on:
    - mysql
    - redis
  environment:
    REDIS_HOST:  redis
    DB_HOST:     mysql
    LOG_CHANNEL: stderr
    USER:        1000:1000
  restart: unless-stopped
  volumes:
    - .:/var/www
    - .env:/var/www/.env
    - .docker/php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
  working_dir: /var/www

# =========================================
# Networks
# =========================================
networks:
  mysql-net: {}
  redis-net: {}
  proxy-net: {}

# =========================================
# Volumes
# =========================================
volumes:
  mysql-vol: {}
  redis-vol: {}

# =========================================
# Services
# =========================================
services:
  redis:
    image: redis:alpine
    command: redis-server --bind 0.0.0.0 --requirepass ${REDIS_PASSWORD}
    networks:
      - redis-net
    ports:
      - ${REDIS_PORT:-6379}:6379
    restart: unless-stopped
    volumes:
      - redis-vol:/data

  mysql:
    image: mysql:8.0
    # PDO Doesn't support MySQL 8 caching_sha2_password Authentication
    # @see https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password
    command:
      - '--default-authentication-plugin=mysql_native_password'
      - '--character-set-server=utf8mb4'
      - '--collation-server=utf8mb4_unicode_ci'
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      # MYSQL_USER:          ${DB_USERNAME}
      # MYSQL_PASSWORD:      ${DB_PASSWORD}
      MYSQL_DATABASE:      ${DB_DATABASE}
    networks:
      - mysql-net
    ports:
      - ${DB_PORT:-3306}:3306
    restart: unless-stopped
    volumes:
      - mysql-vol:/var/lib/mysql
      # - .docker/mysql:/docker-entrypoint-initdb.d

  php:
    <<: *app-service
    command: artisan serve --host 0.0.0.0 --port 8000
    ports:
      - 8000:8000
    networks:
      - mysql-net
      - redis-net
      - proxy-net

  schedule:
    <<: *app-service
    command: artisan schedule:run --verbose --no-interaction --sleep=60
    networks:
      - mysql-net
      - redis-net

  horizon:
    <<: *app-service
    command: artisan horizon
    networks:
      - mysql-net
      - redis-net
