#========================
# Define deploy job template
# You MUST set SSH_PRIVATE_KEY_FILE (or SSH_PRIVATE_KEY), SSH_USER, SSH_HOST in Seting CI/CD
# https://git.rabiloo.net/help/ci/variables/README#custom-environment-variables
#========================
.deploy:
  image: docker:stable
  script:
    # Install ssh-agent if not already installed, it is required by Docker.
    - which ssh-agent || apk add --update --no-cache openssh-client

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    # We're using tr to fix line endings which makes ed25519 keys work
    # without extra base64 encoding.
    # https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    # - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - ssh-add $SSH_PRIVATE_KEY_FILE

    # Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    # Use ssh-keyscan to scan the keys of your private server.
    - ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # You can optionally disable host key checking. Be aware that by adding that
    # you are susceptible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - if [[ -f /.dockerenv ]]; then
      echo -e "Host *\n\tStrictHostKeyChecking no\n\n" >> ~/.ssh/config;
      chmod 644 ~/.ssh/config;
      fi

    # Setup docker and get image
    - export DOCKER_HOST=ssh://$SSH_USER@$SSH_HOST
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG;

    # Deploy
    - ssh $SSH_USER@$SSH_HOST 'cd /apps/weekly; docker-compose up -d'

#========================
# Define pipeline stages
#========================
stages:
  - preparation
  - test
  - build
  - deploy

#========================
# Define global defaults
#========================
default:
  image: oanhnn/laravel:latest

#========================
# Define global variables
#========================
variables:
  GIT_DEPTH: 1

#========================
# Define jobs
#========================
get:vendors:
  stage: preparation
  needs: []
  image: composer
  before_script:
    - composer config -g cache-dir "$(pwd)/composer-cache"
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts --ignore-platform-reqs
  cache:
    key:
      prefix: ${CI_JOB_NAME}
      files:
        - composer.json
        - composer.lock
    paths:
      - composer-cache/
  artifacts:
    paths:
      - vendor/
    expire_in: 1 days
    when: on_success

get:node-modules:
  stage: preparation
  needs: []
  image: node:12-alpine
  script:
    - apk add --update --no-cache git build-base
    - npm ci --quiet
  cache:
    key:
      prefix: ${CI_JOB_NAME}
      files:
        - package.json
        - package-lock.json
    paths:
      - node_modules/
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 days
    when: on_success

check:security:
  stage: test
  needs: []
  variables:
    VERSION: 1.0.0
  only:
    changes:
      - composer.lock
  before_script:
    - wget -L -O security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v$VERSION/local-php-security-checker_$VERSION_linux_amd64
    - chmod a+x security-checker
  script:
    - ./security-checker

check:phpcs:
  stage: test
  needs: []
  before_script:
    - wget -L -O phpcs https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar
    - chmod a+x phpcs
  script:
    - ./phpcs --standard=phpcs.xml.dist

check:eslint:
  stage: test
  needs:
    - job: get:node-modules
      artifacts: true
  image: node:12-alpine
  script:
    - npm run lint

# test:jest:
#   stage: test
#   needs:
#     - job: get-node-modules
#       artifacts: true
#   image: node:12-alpine
#   script:
#     - npm run test

test:phpunit:
  stage: test
  needs:
    - job: get:vendors
      artifacts: true
  variables:
    MYSQL_ROOT_PASSWORD: rootpass
    MYSQL_USER:     dev
    MYSQL_PASSWORD: devpass
    MYSQL_DATABASE: laravel
    REDIS_PASSWORD: password
    REDIS_HOST:     redis
    DB_HOST:        mysql
  services:
    - name: mysql:8.0
    - name: redis:alpine
      command:
        - redis-server
        - --requirepass=${REDIS_PASSWORD}
  before_script:
    - docker-php-ext-enable xdebug;
    - cp .env.example .env
    - sed -i "s|^DB_USERNAME=.*|DB_USERNAME=${MYSQL_USER}|g" .env
    - sed -i "s|^DB_PASSWORD=.*|DB_PASSWORD=${MYSQL_PASSWORD}|g" .env
    - sed -i "s|^DB_DATABASE=.*|DB_DATABASE=${MYSQL_DATABASE}|g" .env
    # - sed -i "s|^REDIS_PASSWORD=.*|REDIS_PASSWORD=${REDIS_PASSWORD}|g" .env
    - php artisan key:generate
    - php artisan migrate --force --seed
  script:
    - vendor/bin/phpunit --coverage-text --colors=never
  coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
  artifacts:
    paths:
      - storage/logs # for debugging
    expire_in: 1 days
    when: on_failure

build:assets:
  stage: build
  needs:
    - job: get:node-modules
      artifacts: true
  image: node:12-alpine
  script:
    - npm run prod
  artifacts:
    paths:
      - public/
    expire_in: 1 days
    when: on_success

build:docker-image:
  stage: build
  needs: []
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: '/certs'
  before_script:
    - export CI_BUILD_SHA=${CI_COMMIT_SHA:0:8}
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - if [[ $CI_COMMIT_REF_SLUG == 'master' ]]; then
        export IMAGE_TAG=latest;
      else
        export IMAGE_TAG=$CI_COMMIT_REF_SLUG;
      fi
  script:
    - export IMAGE_CACHE_TAG=$IMAGE_TAG
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_CACHE_TAG || export IMAGE_CACHE_TAG=latest
    - docker build --cache-from $CI_REGISTRY_IMAGE:$IMAGE_CACHE_TAG -t $CI_REGISTRY_IMAGE:$CI_BUILD_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_BUILD_SHA $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

production:
  stage: deploy
  only:
    - tags
  extends: .deploy
  when: manual
  environment:
    name: production

staging:
  stage: deploy
  only:
    - develop
    - master
  extends: .deploy
  when: manual
  environment:
    name: staging
